data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Nodes", "Edges"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Time vs. Edges
ggplot(melted_data, aes(x = Edges, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequencial ~ Nodes + Edges, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_mpi_2 <- lm(OMP.2.THREADS ~ Nodes + Edges, data = data)
summary(lm_mpi_2)
lm_mpi_3 <- lm(OMP.3.THREADS ~ Nodes + Edges, data = data)
summary(lm_mpi_3)
lm_mpi_4 <- lm(OMP.4.THREADS ~ Nodes + Edges, data = data)
summary(lm_mpi_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
print(growth_comparison_plot)
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
print(growth_comparison_plot)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Vertices <- as.numeric(data$Nodes)
data$Arestas <- as.numeric(data$Edges)
data$Sequencial <- data$Sequential.Time
data$Sequencial <- as.numeric(data$Sequential.Time)
data$OMP.2.THREADS <- as.numeric(data$OMP.2.THREADS)
data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Vertices", "Arestas"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Vertices, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Time vs. Edges
ggplot(melted_data, aes(x = Arestas, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequencial ~ Vertices + Arestas, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_mpi_2 <- lm(OMP.2.THREADS ~ Vertices + Arestas, data = data)
summary(lm_mpi_2)
lm_mpi_3 <- lm(OMP.3.THREADS ~ Vertices + Arestas, data = data)
summary(lm_mpi_3)
lm_mpi_4 <- lm(OMP.4.THREADS ~ Vertices + Arestas, data = data)
summary(lm_mpi_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Vertices, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequencial" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
print(growth_comparison_plot)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "time_sparse_process.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse=.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$MPI.2.procs <- as.numeric(data$MPI.2.procs)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$MPI.2.THREADS <- as.numeric(data$MPI.2.THREADS)
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$OMP.2.THREADS <- as.numeric(data$OMP.2.THREADS)
data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Nodes", "Edges"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Time vs. Edges
ggplot(melted_data, aes(x = Edges, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequential ~ Nodes + Edges, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_omp_2 <- lm(OMP.2.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_2)
lm_omp_3 <- lm(OMP.3.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_3)
lm_omp_4 <- lm(OMP.4.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "blue",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
print(growth_comparison_plot)
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv" # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Calculate speedup for each OMP configuration
speedup <- data
speedup$`OMP 2 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.2.THREADS`
speedup$`OMP 3 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.3.THREADS`
speedup$`OMP 4 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.4.THREADS`
# Prepare data for plotting
speedup_long <- speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup")]
speedup_long <- gather(speedup_long, key = "Threads", value = "Speedup", -Nodes, -Edges)
speedup_long$Threads <- factor(speedup_long$Threads,
levels = c("OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup"),
labels = c("2 Threads", "3 Threads", "4 Threads"))
# Print speedup table
print(speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup")])
# Plot speedup graph
ggplot(speedup_long, aes(x = Threads, y = Speedup, group = interaction(Nodes, Edges), color = as.factor(Nodes))) +
geom_line() +
geom_point(size = 3) +
labs(title = "Speedup vs Number of Threads",
x = "Number of Threads",
y = "Speedup",
color = "Nodes") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv" # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Calculate speedup for each OMP configuration
speedup <- data
speedup$`OMP 2 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.2.THREADS`
speedup$`OMP 3 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.3.THREADS`
speedup$`OMP 4 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.4.THREADS`
# Prepare data for plotting
speedup_long <- speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup")]
speedup_long <- gather(speedup_long, key = "Threads", value = "Speedup", -Nodes, -Edges)
speedup_long$Threads <- factor(speedup_long$Threads,
levels = c("OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup"),
labels = c("2 Threads", "3 Threads", "4 Threads"))
# Print speedup table
# Print speedup table
print(speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup")])
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/sparse/time_sparse.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$OMP.2.THREADS <- as.numeric(data$OMP.2.THREADS)
data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Nodes", "Edges"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_nodes_process_sparse.png", width = 8, height = 5)
# Time vs. Edges
ggplot(melted_data, aes(x = Edges, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_edges_process_sparse.png", width = 8, height = 5)
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequential ~ Nodes + Edges, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_omp_2 <- lm(OMP.2.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_2)
lm_omp_3 <- lm(OMP.3.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_3)
lm_omp_4 <- lm(OMP.4.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("growth_comparison_process_sparse.png", plot = growth_comparison_plot, width = 8, height = 5)
print(growth_comparison_plot)
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/dense/time_dense.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$OMP.2.THREADS <- as.numeric(data$OMP.2.THREADS)
data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Nodes", "Edges"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_nodes_process_dense.png", width = 8, height = 5)
# Time vs. Edges
ggplot(melted_data, aes(x = Edges, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_edges_process_dense.png", width = 8, height = 5)
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequential ~ Nodes + Edges, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_omp_2 <- lm(OMP.2.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_2)
lm_omp_3 <- lm(OMP.3.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_3)
lm_omp_4 <- lm(OMP.4.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("growth_comparison_process_dense.png", plot = growth_comparison_plot, width = 8, height = 5)
print(growth_comparison_plot)
# Load necessary libraries
library(ggplot2)
library(tidyr)
# Read the CSV file
file_path <- "testes/dense/time_dense.csv" # Replace with your file path
data <- read.csv(file_path, sep = ";")
# User-defined parallelizable fraction (Amdahl's Law)
P <- 0.8  # Fraction of the program that is parallelizable
# Calculate speedup for each OMP configuration (Measured Speedup)
speedup <- data
speedup$`OMP 2 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.2.THREADS`
speedup$`OMP 3 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.3.THREADS`
speedup$`OMP 4 THREADS Speedup` <- speedup$`Sequential.Time` / speedup$`OMP.4.THREADS`
# Calculate theoretical speedup using Amdahl's Law
speedup$`OMP 2 THREADS Theoretical` <- 1 / ((1 - P) + P / 2)
speedup$`OMP 3 THREADS Theoretical` <- 1 / ((1 - P) + P / 3)
speedup$`OMP 4 THREADS Theoretical` <- 1 / ((1 - P) + P / 4)
# Prepare data for plotting
speedup_long <- speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup",
"OMP 2 THREADS Theoretical", "OMP 3 THREADS Theoretical", "OMP 4 THREADS Theoretical")]
speedup_long <- gather(speedup_long, key = "Metric", value = "Speedup", -Nodes, -Edges)
speedup_long$Threads <- factor(gsub(".*THREADS (.*)", "\1", speedup_long$Metric),
levels = c("2 Speedup", "3 Speedup", "4 Speedup", "2 Theoretical", "3 Theoretical", "4 Theoretical"),
labels = c("2 Threads Measured", "3 Threads Measured", "4 Threads Measured",
"2 Threads Theoretical", "3 Threads Theoretical", "4 Threads Theoretical"))
# Separate measured and theoretical data
speedup_long$Type <- ifelse(grepl("Theoretical", speedup_long$Metric), "Theoretical", "Measured")
# Print speedup table
print(speedup[, c("Nodes", "Edges", "OMP 2 THREADS Speedup", "OMP 3 THREADS Speedup", "OMP 4 THREADS Speedup",
"OMP 2 THREADS Theoretical", "OMP 3 THREADS Theoretical", "OMP 4 THREADS Theoretical")])
# Plot speedup graph
ggplot(speedup_long, aes(x = Threads, y = Speedup, group = interaction(Nodes, Edges, Type), color = Type)) +
geom_line(aes(linetype = Type)) +
geom_point(size = 3) +
labs(title = "Measured vs Theoretical Speedup (Amdahl's Law)",
x = "Number of Threads",
y = "Speedup",
color = "Type") +
theme_minimal()
# Load necessary libraries
library(ggplot2)
library(reshape2)
# Read the CSV file
file_path <- "testes/dense/time_dense_range.csv"  # Replace with your file path
data <- read.csv(file_path, sep = ";")
# Convert columns to appropriate types (if needed)
data$Nodes <- as.numeric(data$Nodes)
data$Edges <- as.numeric(data$Edges)
data$Sequential <- data$Sequential.Time
data$Sequential <- as.numeric(data$Sequential.Time)
data$OMP.2.THREADS <- as.numeric(data$OMP.2.THREADS)
data$OMP.3.THREADS <- as.numeric(data$OMP.3.THREADS)
data$OMP.4.THREADS <- as.numeric(data$OMP.4.THREADS)
# Summary of the dataset
summary(data)
# Reshape data for easier plotting with ggplot2
melted_data <- melt(data, id.vars = c("Nodes", "Edges"),
variable.name = "Execution.Type",
value.name = "Execution.Time")
# Rename Execution.Type for readability
melted_data$Execution.Type <- gsub("\\.", " ", melted_data$Execution.Type)
# Scatter plots for data visualization
# Time vs. Nodes
ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Vértices", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_nodes_process_dense_range.png", width = 8, height = 5)
# Time vs. Edges
ggplot(melted_data, aes(x = Edges, y = Execution.Time, color = Execution.Type)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Tempo de Execução vs Arestas", x = "Número de Arestas", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("time_vs_edges_process_dense_range.png", width = 8, height = 5)
# Regression Analysis
# Linear model: Sequential Time ~ Nodes + Edges
lm_sequential <- lm(Sequential ~ Nodes + Edges, data = data)
summary(lm_sequential)
# Linear models: OMP times
lm_omp_2 <- lm(OMP.2.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_2)
lm_omp_3 <- lm(OMP.3.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_3)
lm_omp_4 <- lm(OMP.4.THREADS ~ Nodes + Edges, data = data)
summary(lm_omp_4)
# Growth Comparison
growth_comparison_plot <- ggplot(melted_data, aes(x = Nodes, y = Execution.Time, color = Execution.Type)) +
geom_line() +
labs(title = "Comparação do Crescimento do Tempo de Execução", x = "Número de Vértices", y = "Tempo de Execução") +
theme_minimal() +
scale_color_manual(values = c("Sequential" = "gray",
"OMP 2 THREADS" = "red",
"OMP 3 THREADS" = "green",
"OMP 4 THREADS" = "purple"))
ggsave("growth_comparison_process_dense_range.png", plot = growth_comparison_plot, width = 8, height = 5)
print(growth_comparison_plot)
